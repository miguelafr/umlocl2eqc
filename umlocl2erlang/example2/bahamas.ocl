context AssetFacade::create(asset:Asset)
post:
    if(self.started = false) then
        self.started = self.started@pre and
        self.validURL = self.validURL@pre and
        self.validLogin = self.validLogin@pre and
        self.assets = self.assets@pre and
        result.oclIsTypeOf(NotStartedException)
	else
	    if(self.validURL = false) then
	        self.started = self.started@pre and
	        self.validURL = self.validURL@pre and
	        self.validLogin = self.validLogin@pre and
	        self.assets = self.assets@pre and
	        result.oclIsTypeOf(ConnectionErrorException)
		else
		    if(self.validLogin = false) then
		        self.started = self.started@pre and
		        self.validURL = self.validURL@pre and
		        self.validLogin = self.validLogin@pre and
		        self.assets = self.assets@pre and
		        result.oclIsTypeOf(AuthenticationErrorException)
			else
			    if (self.assets@pre -> select(a | a.assetId = asset.assetId) -> size() > 0) then
			        self.started = self.started@pre and
			        self.validURL = self.validURL@pre and
			        self.validLogin = self.validLogin@pre and
			        self.assets = self.assets@pre and
			        result.oclIsTypeOf(DuplicateInstanceException)
			    else
			        self.started = self.started@pre and
			        self.validURL = self.validURL@pre and
			        self.validLogin = self.validLogin@pre and
			    	self.assets = self.assets@pre->including(asset)
			    endif
		    endif
	    endif
    endif

--post notStarted:
--    if(self.started = false) then
--        self.assets = self.assets@pre and result.oclIsTypeOf(NotStartedException)
--    else
--    	true
--    endif
    
--post connectionError:
--    if(self.validURL = false) then
--        self.assets = self.assets@pre and result.oclIsTypeOf(ConnectionErrorException)
--    else
--    	true
--    endif
    
--post authenticationError:
--    if(self.validLogin = false) then
--        self.assets = self.assets@pre and result.oclIsTypeOf(AuthenticationErrorException)
--    else
--    	true
--    endif
        
--post duplicatedAsset:
--    if (self.assets@pre -> select(a | a.assetId = asset.assetId) -> size() > 0) then
--        self.assets = self.assets@pre and result.oclIsTypeOf(DuplicateInstanceException)
--    else
--    	true
--    endif

--post assetCreated:
--    if (self.assets@pre -> select(a | a.assetId = asset.assetId) -> size() = 0) then
--        self.assets = self.assets@pre->including(asset)
--    else
--    	true
--    endif

context AssetFacade::delete(assetId:String)
post: if (self.assets@pre -> select(a | a.assetId = assetId) -> size() > 0) then
          self.started = self.started@pre and
          self.validURL = self.validURL@pre and
          self.validLogin = self.validLogin@pre and
          self.assets = self.assets@pre -> select(asset | asset.assetId <> assetId) and
            self.assets -> select(asset | asset.assetId = assetId) -> size() = 0
      else
       	  self.started = self.started@pre and
          self.validURL = self.validURL@pre and
          self.validLogin = self.validLogin@pre and
          self.assets = self.assets@pre and result.oclIsTypeOf(InstanceNotFoundException)
      endif

context AssetFacade::findAllAssets()
post: self.started = self.started@pre and
      self.validURL = self.validURL@pre and
      self.validLogin = self.validLogin@pre and
      self.assets = self.assets@pre and result = self.assets

