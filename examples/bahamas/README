================================================================================
= Descripción
================================================================================
Ejemplo de prueba de alguna función de un gestor de contenidos. El ejemplo
usa el operador "@pre" en las postcondiciones especificadas en OCL, por lo que
se genera una máquina de estados.

Para ejecutarlo:

eqc:quickcheck(eqc_test:test()).

--------------------------------------------------------------------------------
- Estado
--------------------------------------------------------------------------------
El estado está compuesto por aquellas variables en las que se use el operador
"@pre", en este caso, "assets", que representa la lista de assets almacenados en 
el sistema.

Además, la máquina de estados supone que existe una función en el SUT/adaptador
con nombre "get_<propiedad>" que se encarga de obtener los datos de la propiedad
"<propiedad>" del estado, en este caso "get_assets".

--------------------------------------------------------------------------------
- Estado inicial
--------------------------------------------------------------------------------
El estado inicial se obtiene preguntando al SUT/adaptador cual es el estado
inicial, puesto que no es posible conocerlo con la especificación OCL ni el
diagrama UML.

No está bien suponer que el estado inicial sean listas vacías o valores a 
"undefined" puesto que es posible que no lo sea.

--------------------------------------------------------------------------------
- Precondiciones
--------------------------------------------------------------------------------
En todas las postcondiciones se conoce cual va a ser el valor de assets después
de ejecutar cada operación, por lo que no se usarán precondiciones dinámicas en
la máquina de estados.

Si en alguna de las postcondiciones no se especificara el valor de "assets"
después de ejecutar la función, las precondiciones se generarían como dinámicas
puesto que en la función "next_state" se deberían usar valores simbólicos y las
precondiciones pudieran necesitarlos.

Una optimización es no usar precondiciones dinámicas aunque no se conozca el
valor de "assets" después de cada ejecución de cada función puesto que las
precondiciones no usan este valor.

--------------------------------------------------------------------------------
- Postcondiciones
--------------------------------------------------------------------------------
Las postcondiciones de la máquina de estado están adaptadas para que reciban
como párametro:
- El estado anterior a que se ejecute la función
- El estado siguiente a que se ejecute la función
- La función que se ejecutó
- El resultado de la función que se ejecutó
- El estado anterior calculado dinámicamente antes de ejecutar la función
- El estado siguiente calculado dinámicamente después de ejecutar la función

En este caso, los estados dinámicos anterior y siguiente no son necesarios.

--------------------------------------------------------------------------------
- Estado siguiente
--------------------------------------------------------------------------------
Las funciones "next_state" se generan utilizando las postcondiciones e
invariantes, en este caso como el valor de "assets" siempre es conocido después
de ejecutar cada operación únicamente se sustituyen los operadores de igualdad
de las postcondiciones OCL por operadores de asignación.

--------------------------------------------------------------------------------
- Generadores
--------------------------------------------------------------------------------
Los datos que se manejan son de tipo "Asset", por lo que se usa un generador
específico para ellos:

gen_asset() ->
    {asset, [{assetId, ocl_gen:gen_string()}, {title, ocl_gen:gen_string()}, {summary, ocl_gen:gen_string()}]}.

La forma de construir el generador consiste en una tupla donde el primer
elemento es el nombre de la clase, y el segundo elemento una lista de tuplas con
los atributos definidos en el diagrama de clases.

Para acceder a las propiedades de una instancia de esta clase, se usa la función:

get_property(PropertyName, Variable) ->
    proplists:get_value(PropertyName, erlang:element(2, Variable)).

definida en el módulo "ocl_datatypes".

--------------------------------------------------------------------------------
- Iteradores
--------------------------------------------------------------------------------
Se crean funciones específicas para los distintos iteradores OCL, en este caso:
"filter". En este caso, se usan las funciones del módulo "ocl_seq" porque el
tipo de dato tratado es una "Sequence" (lista ordenada que permite elementos
repetidos).
